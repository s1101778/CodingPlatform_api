---code---
//uva10190
#include <cmath>
#include <iostream>
using namespace std;

int main() {
    long long n, m, i;

    while (cin >> n >> m) {
        long long cn1 = m;

        for (i = 1; cn1 < n && m > 1; i++) {
            cn1 = pow(m, i);
        }

        if (cn1 > n || m <= 1) {
            cout << "Boring!" << endl;
        } else {
            while (cn1 > 0) {
                cout << cn1;
                if (cn1 != 1) {
                    cout << " ";
                } else {
                    cout << endl;
                }
                cn1 /= m;
            }
        }
    }
    return 0;
}
---dataAInput---
125 5
30 3
80 2
81 3
16 4
10 1
109 0
23 23
12 144
25 3
49 7
0 0
1 1
2 2
1000000 10
67108864 4
134217728 8
32768 8
1073741824 8
170859375 15
293 115
100 50
170859375 15
256 16
1048576 16
290 283
8000 20
285 5
148035889 23
15625 25
676 26
481890304 28
841 29
32768 32
1073741824 4
39135393 33
1100 34
4477456 46
6 3
2209 47
1303210000 190
---dataAOutput---
125 25 5 1
Boring!
Boring!
81 27 9 3 1
16 4 1
Boring!
Boring!
23 1
Boring!
Boring!
49 7 1
Boring!
Boring!
2 1
1000000 100000 10000 1000 100 10 1
67108864 16777216 4194304 1048576 262144 65536 16384 4096 1024 256 64 16 4 1
134217728 16777216 2097152 262144 32768 4096 512 64 8 1
32768 4096 512 64 8 1
1073741824 134217728 16777216 2097152 262144 32768 4096 512 64 8 1
170859375 11390625 759375 50625 3375 225 15 1
Boring!
Boring!
170859375 11390625 759375 50625 3375 225 15 1
256 16 1
1048576 65536 4096 256 16 1
Boring!
8000 400 20 1
Boring!
148035889 6436343 279841 12167 529 23 1
15625 625 25 1
676 26 1
481890304 17210368 614656 21952 784 28 1
841 29 1
32768 1024 32 1
1073741824 268435456 67108864 16777216 4194304 1048576 262144 65536 16384 4096 1024 256 64 16 4 1
39135393 1185921 35937 1089 33 1
Boring!
4477456 97336 2116 46 1
Boring!
2209 47 1
1303210000 6859000 36100 190 1
---dataBInput---
0 0
1 1
2 2
4194304 2
8192 2
3 9
10 5
310 117
9 3
40353607 7
5764801 7
310 219
1220703125 5
9978 9861
1000000000 10
121 11
1162261467 3
248832 12
225 15
1419857 17
361 19
893871739 19
6859 19
400 20
6436343 23
576 24
7962624 24
625 25
173 90
20511149 29
810000 30
961 31
1024 32
1838265625 35
1296 36
69343957 37
130691232 42
3136 56
3721 61
226981 61
992436543 63
4624 68
328509 69
1564031349 69
---dataBOutput---
Boring!
Boring!
2 1
4194304 2097152 1048576 524288 262144 131072 65536 32768 16384 8192 4096 2048 1024 512 256 128 64 32 16 8 4 2 1
8192 4096 2048 1024 512 256 128 64 32 16 8 4 2 1
Boring!
Boring!
Boring!
9 3 1
40353607 5764801 823543 117649 16807 2401 343 49 7 1
5764801 823543 117649 16807 2401 343 49 7 1
Boring!
1220703125 244140625 48828125 9765625 1953125 390625 78125 15625 3125 625 125 25 5 1
Boring!
1000000000 100000000 10000000 1000000 100000 10000 1000 100 10 1
121 11 1
1162261467 387420489 129140163 43046721 14348907 4782969 1594323 531441 177147 59049 19683 6561 2187 729 243 81 27 9 3 1
248832 20736 1728 144 12 1
225 15 1
1419857 83521 4913 289 17 1
361 19 1
893871739 47045881 2476099 130321 6859 361 19 1
6859 361 19 1
400 20 1
6436343 279841 12167 529 23 1
576 24 1
7962624 331776 13824 576 24 1
625 25 1
Boring!
20511149 707281 24389 841 29 1
810000 27000 900 30 1
961 31 1
1024 32 1
1838265625 52521875 1500625 42875 1225 35 1
1296 36 1
69343957 1874161 50653 1369 37 1
130691232 3111696 74088 1764 42 1
3136 56 1
3721 61 1
226981 3721 61 1
992436543 15752961 250047 3969 63 1
4624 68 1
328509 4761 69 1
1564031349 22667121 328509 4761 69 1